{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet AuthentificationComponent = class AuthentificationComponent {\n  constructor(UAService, RoleService, router, UtilisateurService, route) {\n    this.UAService = UAService;\n    this.RoleService = RoleService;\n    this.router = router;\n    this.UtilisateurService = UtilisateurService;\n    this.route = route;\n    this.errorMessage = '';\n    this.validateControl = controlName => {\n      return this.loginForm.get(controlName).invalid && this.loginForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.loginForm.get(controlName).hasError(errorName);\n    };\n    this.loginUser = loginFormValue => {\n      this.showError = false;\n      const login = {\n        ...loginFormValue\n      };\n      const userForAuth = {\n        userName: login.userName,\n        password: login.password\n      };\n      this.UtilisateurService.login(userForAuth).subscribe({\n        next: res => {\n          localStorage.setItem(\"token\", res.token);\n          localStorage.setItem(\"username\", login.userName);\n          this.UtilisateurService.Recherche(this.usernamebar).subscribe(userdata => {\n            this.UAService.getListByUtilisateur(userdata[0].id).subscribe(uadata => {\n              if (uadata[0].idRole == null) localStorage.setItem(\"role\", \"ROLE NON EFFECTUÉ\");else {\n                this.RoleService.getRole(uadata[0].idRole).subscribe(roledata => {\n                  localStorage.setItem(\"role\", roledata.nom);\n                });\n              }\n            });\n          });\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\n          this.router.navigate(['/Chargement']);\n        },\n        error: err => {\n          this.errorMessage = err.message;\n          this.showError = true;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      userName: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required])\n    });\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n};\nAuthentificationComponent = __decorate([Component({\n  selector: 'app-Auhtentification',\n  templateUrl: './Authentification.component.html'\n})], AuthentificationComponent);\nexport { AuthentificationComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","Validators","AuthentificationComponent","constructor","UAService","RoleService","router","UtilisateurService","route","controlName","loginForm","get","invalid","touched","errorName","hasError","loginFormValue","showError","login","userForAuth","userName","password","subscribe","next","res","localStorage","setItem","token","Recherche","usernamebar","userdata","getListByUtilisateur","id","uadata","idRole","getRole","roledata","nom","sendAuthStateChangeNotification","isAuthSuccessful","navigate","error","err","errorMessage","message","ngOnInit","required","returnUrl","snapshot","queryParams","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\Authentification.component.ts"],"sourcesContent":["import { Component, NgModule, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UtilisateurService } from '../../Services/utilisateur.service';\r\nimport { Utilisateur } from '../../Models/utilisateur.model';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Login } from './../../auth/login.interface';\r\nimport { Response } from './../../auth/response.interface';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { UtilisateurApplicationService } from '../../Services/utilisateurapplication.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-Auhtentification',\r\n  templateUrl: './Authentification.component.html',\r\n})\r\n\r\nexport class AuthentificationComponent implements OnInit {\r\n  private returnUrl!: string;\r\n\r\n  loginForm!: FormGroup;\r\n  errorMessage: string = '';\r\n  showError!: boolean;\r\n  constructor(private UAService: UtilisateurApplicationService, private RoleService: RoleService, private router: Router,\r\n              private UtilisateurService: UtilisateurService,  private route: ActivatedRoute){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      userName: new FormControl(\"\", [Validators.required]),\r\n      password: new FormControl(\"\", [Validators.required])\r\n    })\r\n   this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n\r\n  validateControl = (controlName: string) => {\r\n    return this.loginForm.get(controlName)!.invalid && this.loginForm.get(controlName)!.touched\r\n  }\r\n\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n    return this.loginForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n\r\n  loginUser = (loginFormValue : any) => {\r\n    this.showError = false;\r\n    const login = { ...loginFormValue };\r\n    const userForAuth: Login = {\r\n      userName: login.userName,\r\n      password: login.password\r\n    }\r\n    this.UtilisateurService.login(userForAuth).subscribe({\r\n      next: (res: Response) => {\r\n          localStorage.setItem(\"token\", res.token);\r\n          localStorage.setItem(\"username\", login.userName);\r\n\r\n          this.UtilisateurService.Recherche(this.usernamebar).subscribe((userdata) => {\r\n            this.UAService.getListByUtilisateur(userdata[0].id).subscribe((uadata) => {\r\n             if (uadata[0].idRole == null) localStorage.setItem(\"role\", \"ROLE NON EFFECTUÉ\");\r\n             else {\r\n                this.RoleService.getRole(uadata[0].idRole).subscribe((roledata) => {\r\n                  localStorage.setItem(\"role\", roledata.nom);\r\n               });\r\n             }\r\n            })\r\n          });\r\n\r\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\r\n          this.router.navigate(['/Chargement']);\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.errorMessage = err.message;\r\n          this.showError = true;\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}