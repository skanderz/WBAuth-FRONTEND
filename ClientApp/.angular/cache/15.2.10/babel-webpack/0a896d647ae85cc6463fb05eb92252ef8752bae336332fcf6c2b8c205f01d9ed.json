{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet TwoStepVerificationAppExterneComponent = class TwoStepVerificationAppExterneComponent {\n  constructor(UtilisateurService, passConfValidator, router, route, JournalisationService, ActionService) {\n    this.UtilisateurService = UtilisateurService;\n    this.passConfValidator = passConfValidator;\n    this.router = router;\n    this.route = route;\n    this.JournalisationService = JournalisationService;\n    this.ActionService = ActionService;\n    this.validateControl = controlName => {\n      return this.twoStepForm.get(controlName).invalid && this.twoStepForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.twoStepForm.get(controlName).hasError(errorName);\n    };\n    this.loginUser = twoStepFormValue => {\n      this.showError = false;\n      const formValue = {\n        ...twoStepFormValue\n      };\n      let twoFactorDto = {\n        email: this.email,\n        provider: this.provider,\n        code: formValue.twoFactorCode\n      };\n      console.log(twoFactorDto);\n      this.UtilisateurService.twoStepLogin(twoFactorDto).subscribe({\n        next: res => {\n          this.showSuccess = true;\n          localStorage.setItem(\"token\", res.token);\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\n          this.router.navigate([\"/Chargement\"]);\n        },\n        error: err => {\n          this.errorMessage = \"Vérification du code échouée !\";\n          this.showError = true;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.twoStepForm = new FormGroup({\n      twoFactorCode: new FormControl('', [Validators.required])\n    });\n    this.provider = this.route.snapshot.queryParams['provider'];\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n    this.UtilisateurService.Recherche(this.route.snapshot.queryParams['email']).subscribe(data => {\n      this.email = data[0].email;\n    });\n  }\n};\nTwoStepVerificationAppExterneComponent = __decorate([Component({\n  selector: 'app-two-step-verificationAppExterne',\n  templateUrl: './two-step-verificationAppExterne.component.html'\n})], TwoStepVerificationAppExterneComponent);\nexport { TwoStepVerificationAppExterneComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","Validators","TwoStepVerificationAppExterneComponent","constructor","UtilisateurService","passConfValidator","router","route","JournalisationService","ActionService","controlName","twoStepForm","get","invalid","touched","errorName","hasError","twoStepFormValue","showError","formValue","twoFactorDto","email","provider","code","twoFactorCode","console","log","twoStepLogin","subscribe","next","res","showSuccess","localStorage","setItem","token","sendAuthStateChangeNotification","isAuthSuccessful","navigate","error","err","errorMessage","ngOnInit","required","snapshot","queryParams","returnUrl","Recherche","data","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\two-step-verification.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Response } from '../../auth/response.interface';\r\nimport { TwoFactor } from '../../auth/twoFactor.interface';\r\nimport { UtilisateurService } from './../../Services/utilisateur.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { PasswordConfirmationValidatorService } from './../../auth/password-confirmation-validator.service';\r\nimport { JournalisationService } from '../../Services/journalisation.service';\r\nimport { ActionService } from '../../Services/action.service';\r\nimport { Action } from '../../Models/action.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-two-step-verificationAppExterne',\r\n  templateUrl: './two-step-verificationAppExterne.component.html'\r\n})\r\n\r\nexport class TwoStepVerificationAppExterneComponent implements OnInit {\r\n  private provider!: string;\r\n  private email!: string;\r\n  private returnUrl!: string;\r\n  twoStepForm!: FormGroup;\r\n  showError!: boolean;\r\n  showSuccess!: boolean;\r\n  errorMessage!: string;\r\n\r\n  constructor(private UtilisateurService: UtilisateurService, private passConfValidator: PasswordConfirmationValidatorService, private router: Router,\r\n              private route: ActivatedRoute, private JournalisationService: JournalisationService,private ActionService: ActionService){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.twoStepForm = new FormGroup({\r\n      twoFactorCode: new FormControl('', [Validators.required]),\r\n    });\r\n    this.provider = this.route.snapshot.queryParams['provider'];\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\r\n    this.UtilisateurService.Recherche(this.route.snapshot.queryParams['email']).subscribe((data) => {\r\n      this.email = data[0].email;\r\n    })\r\n  }\r\n\r\n  validateControl = (controlName: string) => {\r\n    return this.twoStepForm.get(controlName)!.invalid && this.twoStepForm.get(controlName)!.touched\r\n  }\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n    return this.twoStepForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n  loginUser = (twoStepFormValue : any) => {\r\n    this.showError = false;\r\n    const formValue = { ...twoStepFormValue };\r\n    let twoFactorDto: TwoFactor = {\r\n      email: this.email,\r\n      provider: this.provider,\r\n      code: formValue.twoFactorCode\r\n    }\r\n    console.log(twoFactorDto);\r\n    this.UtilisateurService.twoStepLogin(twoFactorDto).subscribe({\r\n      next: (res: Response) => {\r\n          this.showSuccess = true;\r\n          localStorage.setItem(\"token\", res.token);\r\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\r\n          this.router.navigate([\"/Chargement\"]);\r\n        },\r\n      error: (err: HttpErrorResponse) => {\r\n          this.errorMessage = \"Vérification du code échouée !\";\r\n          this.showError = true;\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}