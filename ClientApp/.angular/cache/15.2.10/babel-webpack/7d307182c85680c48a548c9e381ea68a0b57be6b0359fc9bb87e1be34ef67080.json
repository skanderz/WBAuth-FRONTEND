{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet BarreHauteComponent = class BarreHauteComponent {\n  constructor(UAService, RoleService, router, UtilisateurService, route) {\n    this.UAService = UAService;\n    this.RoleService = RoleService;\n    this.router = router;\n    this.UtilisateurService = UtilisateurService;\n    this.route = route;\n    this.isDropdownOpen = false;\n    this.logout = () => {\n      this.UtilisateurService.logout();\n      this.router.navigate([\"/\"]);\n    };\n  }\n  ngOnInit() {\n    this.UtilisateurService.authChanged.subscribe(res => {\n      this.isUserAuthenticated = res;\n    });\n    this.usernamebar = localStorage.getItem(\"username\").toUpperCase();\n    this.rolebar = localStorage.getItem(\"role\").toUpperCase();\n    const username = localStorage.getItem(\"username\");\n    this.UtilisateurService.Recherche(username).subscribe(userdata => {\n      this.UAService.getListByUtilisateur(userdata[0].id).subscribe(uadata => {\n        if (uadata[0].idRole == null) {\n          localStorage.setItem(\"role\", \"ROLE NON EFFECTUÉ\");\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\n          this.router.navigate(['/Chargement']);\n        } else {\n          this.RoleService.getRole(uadata[0].idRole).subscribe(roledata => {\n            localStorage.setItem(\"role\", roledata.nom);\n            this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\n            this.router.navigate(['/Chargement']);\n          });\n        }\n      });\n    });\n  }\n  toggleDropdown() {\n    this.isDropdownOpen = !this.isDropdownOpen;\n  }\n};\nBarreHauteComponent = __decorate([Component({\n  selector: 'app-BarreHaute',\n  templateUrl: './BarreHaute.component.html',\n  styleUrls: ['./BarreHaute.component.css']\n})], BarreHauteComponent);\nexport { BarreHauteComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAWrD,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAM9BC,YAAoBC,SAAwC,EAAUC,WAAwB,EAAUC,MAAc,EAC5GC,kBAAsC,EAAUC,KAAqB;IAD3D,cAAS,GAATJ,SAAS;IAAyC,gBAAW,GAAXC,WAAW;IAAuB,WAAM,GAANC,MAAM;IACpG,uBAAkB,GAAlBC,kBAAkB;IAA8B,UAAK,GAALC,KAAK;IAL/D,mBAAc,GAAY,KAAK;IAmCxB,WAAM,GAAG,MAAK;MACnB,IAAI,CAACD,kBAAkB,CAACE,MAAM,EAAE;MAChC,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;EAjCgF;EAGjFC,QAAQ;IACN,IAAI,CAACJ,kBAAkB,CAACK,WAAW,CAACC,SAAS,CAACC,GAAG,IAAG;MAAG,IAAI,CAACC,mBAAmB,GAAGD,GAAG;IAAE,CAAC,CAAC;IACzF,IAAI,CAACE,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAE,CAACC,WAAW,EAAE;IAClE,IAAI,CAACC,OAAO,GAAGH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAE,CAACC,WAAW,EAAE;IAC1D,MAAME,QAAQ,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,CAACX,kBAAkB,CAACe,SAAS,CAACD,QAAQ,CAAC,CAACR,SAAS,CAAEU,QAAQ,IAAI;MACjE,IAAI,CAACnB,SAAS,CAACoB,oBAAoB,CAACD,QAAQ,CAAC,CAAC,CAAC,CAACE,EAAE,CAAC,CAACZ,SAAS,CAAEa,MAAM,IAAI;QACvE,IAAIA,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,IAAI,IAAI,EAAE;UAC5BV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAE,mBAAmB,CAAC;UACjD,IAAI,CAACrB,kBAAkB,CAACsB,+BAA+B,CAACf,GAAG,CAACgB,gBAAgB,CAAC;UAC7E,IAAI,CAACxB,MAAM,CAACI,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;SACtC,MACI;UACH,IAAI,CAACL,WAAW,CAAC0B,OAAO,CAACL,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAACd,SAAS,CAAEmB,QAAQ,IAAI;YAChEf,YAAY,CAACW,OAAO,CAAC,MAAM,EAAEI,QAAQ,CAACC,GAAG,CAAC;YAC1C,IAAI,CAAC1B,kBAAkB,CAACsB,+BAA+B,CAACf,GAAG,CAACgB,gBAAgB,CAAC;YAC7E,IAAI,CAACxB,MAAM,CAACI,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;UACvC,CAAC,CAAC;;MAEN,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAGAwB,cAAc;IAAK,IAAI,CAACC,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;EAAE;CAWhE;AA7CYjC,mBAAmB,eAL/BD,SAAS,CAAC;EACTmC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACWpC,mBAAmB,CA6C/B;SA7CYA,mBAAmB","names":["Component","BarreHauteComponent","constructor","UAService","RoleService","router","UtilisateurService","route","logout","navigate","ngOnInit","authChanged","subscribe","res","isUserAuthenticated","usernamebar","localStorage","getItem","toUpperCase","rolebar","username","Recherche","userdata","getListByUtilisateur","id","uadata","idRole","setItem","sendAuthStateChangeNotification","isAuthSuccessful","getRole","roledata","nom","toggleDropdown","isDropdownOpen","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\BarreHaute\\BarreHaute.component.ts"],"sourcesContent":["import { Component, OnInit ,OnDestroy } from '@angular/core';\r\nimport { UtilisateurService } from './../Services/utilisateur.service';\r\nimport { Utilisateur } from './../Models/utilisateur.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-BarreHaute',\r\n  templateUrl: './BarreHaute.component.html',\r\n  styleUrls: ['./BarreHaute.component.css']\r\n})\r\nexport class BarreHauteComponent implements OnInit {\r\n  public isUserAuthenticated!: boolean;\r\n  isDropdownOpen: boolean = false;\r\n  usernamebar!: string | null;\r\n  rolebar!: string | null;\r\n\r\n  constructor(private UAService: UtilisateurApplicationService, private RoleService: RoleService, private router: Router,\r\n    private UtilisateurService: UtilisateurService, private route: ActivatedRoute){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.UtilisateurService.authChanged.subscribe(res => { this.isUserAuthenticated = res; })\r\n    this.usernamebar = localStorage.getItem(\"username\")!.toUpperCase();\r\n    this.rolebar = localStorage.getItem(\"role\")!.toUpperCase();\r\n    const username = localStorage.getItem(\"username\");\r\n    this.UtilisateurService.Recherche(username).subscribe((userdata) => {\r\n      this.UAService.getListByUtilisateur(userdata[0].id).subscribe((uadata) => {\r\n        if (uadata[0].idRole == null) {\r\n          localStorage.setItem(\"role\", \"ROLE NON EFFECTUÉ\");\r\n          this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\r\n          this.router.navigate(['/Chargement']);\r\n        }\r\n        else {\r\n          this.RoleService.getRole(uadata[0].idRole).subscribe((roledata) => {\r\n            localStorage.setItem(\"role\", roledata.nom);\r\n            this.UtilisateurService.sendAuthStateChangeNotification(res.isAuthSuccessful);\r\n            this.router.navigate(['/Chargement']);\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  toggleDropdown() { this.isDropdownOpen = !this.isDropdownOpen; }\r\n\r\n\r\n  public logout = () => {\r\n    this.UtilisateurService.logout();\r\n    this.router.navigate([\"/\"]);\r\n  }\r\n \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}