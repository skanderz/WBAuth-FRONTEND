{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../Services/utilisateur.service\";\nexport class AuthGuard {\n  constructor(router, UtilisateurService) {\n    this.router = router;\n    this.UtilisateurService = UtilisateurService;\n  }\n  canActivate(next, state) {\n    if (this.UtilisateurService.isUserAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/AccueilPrincipale'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UtilisateurService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc,EAAUC,kBAAsC;IAA9D,WAAM,GAAND,MAAM;IAAkB,uBAAkB,GAAlBC,kBAAkB;EAAsB;EAGpFC,WAAW,CAACC,IAA4B,EAAEC,KAA0B;IAClE,IAAI,IAAI,CAACH,kBAAkB,CAACI,mBAAmB,EAAE,EAAE;MAAG,OAAO,IAAI;;IACjE,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,oBAAoB,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEJ,KAAK,CAACK;MAAG;IAAE,CAAE,CAAC;IACvF,OAAO,KAAK;EACd;EAAC;qBATUX,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAY,SAATZ,SAAS;IAAAa,YAFR;EAAM","names":["AuthGuard","constructor","router","UtilisateurService","canActivate","next","state","isUserAuthenticated","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { UtilisateurService } from '../Services/utilisateur.service'; \r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private router: Router, private UtilisateurService: UtilisateurService){}\r\n\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.UtilisateurService.isUserAuthenticated()) {  return true; }\r\n    this.router.navigate(['/AccueilPrincipale'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}