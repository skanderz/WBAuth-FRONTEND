{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet TwoStepVerificationComponent = class TwoStepVerificationComponent {\n  constructor(UtilisateurService, passConfValidator, router, route, JournalisationService, ActionService) {\n    this.UtilisateurService = UtilisateurService;\n    this.passConfValidator = passConfValidator;\n    this.router = router;\n    this.route = route;\n    this.JournalisationService = JournalisationService;\n    this.ActionService = ActionService;\n    this.validateControl = controlName => {\n      return this.resetPasswordForm.get(controlName).invalid && this.resetPasswordForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.resetPasswordForm.get(controlName).hasError(errorName);\n    };\n    this.resetPassword = resetPasswordFormValue => {\n      this.showError = this.showSuccess = false;\n      const resetPass = {\n        ...resetPasswordFormValue\n      };\n      const resetPassDto = {\n        password: resetPass.password,\n        confirmPassword: resetPass.confirm,\n        token: this.token,\n        email: this.email\n      };\n      this.UtilisateurService.resetPassword(resetPassDto).subscribe({\n        next: res => {\n          this.showSuccess = true;\n          const resetPasswordBtn = document.getElementById('resetPasswordBtn');\n          resetPasswordBtn.disabled = true;\n          resetPasswordBtn.style.backgroundColor = 'lightgray';\n          resetPasswordBtn.style.borderColor = '#111';\n          resetPasswordBtn.style.color = '#100564';\n          resetPasswordBtn.style.cursor = 'not-allowed';\n          this.EnregistrerAction();\n        },\n        error: () => {\n          if (resetPass.password.length < 6) {\n            this.showError = true;\n            this.errorMessage = \"Le mot de passe doit contenir au moin 6 caractère !\";\n          } else {\n            this.showError = true;\n            this.errorMessage = \"Le lien de réinitialisation du mot de passe est expiré. Veuillez effectuer une nouvelle demande de réinitialisation si nécessaire.\";\n          }\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.resetPasswordForm = new FormGroup({\n      password: new FormControl('', [Validators.required]),\n      confirm: new FormControl('')\n    });\n    this.resetPasswordForm.get('confirm').setValidators([Validators.required, this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password'))]);\n    this.token = this.route.snapshot.queryParams['token'];\n    this.email = this.route.snapshot.queryParams['email'];\n  }\n  EnregistrerAction() {\n    let username = localStorage.getItem(\"username\");\n    this.UtilisateurService.Recherche(username).subscribe(data => {\n      this.JournalisationService.getJournalisations(data[0].id).subscribe(dataJournalisations => {\n        let idJournalisation = dataJournalisations[dataJournalisations.length - 1].id;\n        const action = {\n          id: 0,\n          application: \"www.wbauth.com\",\n          date: new Date(),\n          description: `l'utilisateur ${username} a consulter la liste des applications `,\n          idJournalisation: idJournalisation,\n          journalisation: dataJournalisations[dataJournalisations.length - 1]\n        };\n        this.ActionService.EnregistrementActions(action).subscribe(() => {\n          console.log(action);\n        });\n      });\n    });\n  }\n};\nTwoStepVerificationComponent = __decorate([Component({\n  selector: 'app-two-step-verification',\n  templateUrl: './TwoStepVerification.component.html'\n})], TwoStepVerificationComponent);\nexport { TwoStepVerificationComponent };","map":{"version":3,"mappings":";AAGA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAsC,gBAAgB;AAa1F,IAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAQvCC,YAAoBC,kBAAsC,EAAUC,iBAAuD,EAAUC,MAAc,EAC/HC,KAAqB,EAAUC,qBAA4C,EAASC,aAA4B;IADhH,uBAAkB,GAAlBL,kBAAkB;IAA8B,sBAAiB,GAAjBC,iBAAiB;IAAgD,WAAM,GAANC,MAAM;IACvH,UAAK,GAALC,KAAK;IAA0B,0BAAqB,GAArBC,qBAAqB;IAAgC,kBAAa,GAAbC,aAAa;IAerH,oBAAe,GAAIC,WAAmB,IAAI;MACvC,OAAO,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAACF,WAAW,CAAE,CAACG,OAAO,IAAI,IAAI,CAACF,iBAAiB,CAACC,GAAG,CAACF,WAAW,CAAE,CAACI,OAAO;IAC9G,CAAC;IAED,aAAQ,GAAG,CAACJ,WAAmB,EAAEK,SAAiB,KAAI;MACnD,OAAO,IAAI,CAACJ,iBAAiB,CAACC,GAAG,CAACF,WAAW,CAAE,CAACM,QAAQ,CAACD,SAAS,CAAC;IACtE,CAAC;IAED,kBAAa,GAAIE,sBAA2B,IAAI;MAC9C,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,WAAW,GAAG,KAAK;MACzC,MAAMC,SAAS,GAAG;QAAE,GAAGH;MAAsB,CAAE;MAC/C,MAAMI,YAAY,GAAmB;QAClCC,QAAQ,EAAEF,SAAS,CAACE,QAAQ;QAC5BC,eAAe,EAAEH,SAAS,CAACI,OAAO;QAClCC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,KAAK,EAAE,IAAI,CAACA;OACd;MACG,IAAI,CAACtB,kBAAkB,CAACuB,aAAa,CAACN,YAAY,CAAC,CAACO,SAAS,CAAC;QAC5DC,IAAI,EAAGC,GAAa,IAAI;UACtB,IAAI,CAACX,WAAW,GAAG,IAAI;UACvB,MAAMY,gBAAgB,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAsB;UACzFF,gBAAgB,CAACG,QAAQ,GAAG,IAAI;UAChCH,gBAAgB,CAACI,KAAK,CAACC,eAAe,GAAG,WAAW;UACpDL,gBAAgB,CAACI,KAAK,CAACE,WAAW,GAAG,MAAM;UAC3CN,gBAAgB,CAACI,KAAK,CAACG,KAAK,GAAG,SAAS;UACxCP,gBAAgB,CAACI,KAAK,CAACI,MAAM,GAAG,aAAa;UAC7C,IAAI,CAACC,iBAAiB,EAAE;QAC1B,CAAC;QACDC,KAAK,EAAE,MAAK;UACV,IAAIrB,SAAS,CAACE,QAAQ,CAACoB,MAAM,GAAG,CAAC,EAAE;YACjC,IAAI,CAACxB,SAAS,GAAG,IAAI;YACrB,IAAI,CAACyB,YAAY,GAAG,qDAAqD;WAC1E,MACI;YACL,IAAI,CAACzB,SAAS,GAAG,IAAI;YACrB,IAAI,CAACyB,YAAY,GAAG,oIAAoI;;QAE1J;OACD,CAAC;IACR,CAAC;EAtDqI;EAGtIC,QAAQ;IACN,IAAI,CAACjC,iBAAiB,GAAG,IAAIZ,SAAS,CAAC;MACrCuB,QAAQ,EAAE,IAAItB,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAAC4C,QAAQ,CAAC,CAAC;MACpDrB,OAAO,EAAE,IAAIxB,WAAW,CAAC,EAAE;KAC5B,CAAC;IACF,IAAI,CAACW,iBAAiB,CAACC,GAAG,CAAC,SAAS,CAAE,CAACkC,aAAa,CAAC,CAAC7C,UAAU,CAAC4C,QAAQ,EACzE,IAAI,CAACxC,iBAAiB,CAAC0C,uBAAuB,CAAC,IAAI,CAACpC,iBAAiB,CAACC,GAAG,CAAC,UAAU,CAAE,CAAC,CAAC,CAAC;IACzF,IAAI,CAACa,KAAK,GAAG,IAAI,CAAClB,KAAK,CAACyC,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;IACrD,IAAI,CAACvB,KAAK,GAAG,IAAI,CAACnB,KAAK,CAACyC,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;EACvD;EA6CAT,iBAAiB;IACf,IAAIU,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC/C,IAAI,CAAChD,kBAAkB,CAACiD,SAAS,CAACH,QAAQ,CAAC,CAACtB,SAAS,CAAE0B,IAAI,IAAI;MAC7D,IAAI,CAAC9C,qBAAqB,CAAC+C,kBAAkB,CAACD,IAAI,CAAC,CAAC,CAAC,CAACE,EAAE,CAAC,CAAC5B,SAAS,CAAE6B,mBAAmB,IAAI;QAC1F,IAAIC,gBAAgB,GAAGD,mBAAmB,CAACA,mBAAmB,CAACf,MAAM,GAAG,CAAC,CAAC,CAACc,EAAE;QAC7E,MAAMG,MAAM,GAAW;UACrBH,EAAE,EAAE,CAAC;UAAEI,WAAW,EAAE,gBAAgB;UAAEC,IAAI,EAAE,IAAIC,IAAI,EAAE;UAAEC,WAAW,EAAE,iBAAiBb,QAAQ,yCAAyC;UACvIQ,gBAAgB,EAAEA,gBAAgB;UAAEM,cAAc,EAAEP,mBAAmB,CAACA,mBAAmB,CAACf,MAAM,GAAG,CAAC;SACvG;QACD,IAAI,CAACjC,aAAa,CAACwD,qBAAqB,CAACN,MAAM,CAAC,CAAC/B,SAAS,CAAC,MAAK;UAAGsC,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;QAAE,CAAC,CAAC;MAC5F,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;CAID;AAlFYzD,4BAA4B,eALxCJ,SAAS,CAAC;EACTsE,QAAQ,EAAE,2BAA2B;EACrCC,WAAW,EAAE;CACd,CAAC,GAEWnE,4BAA4B,CAkFxC;SAlFYA,4BAA4B","names":["Component","FormGroup","FormControl","Validators","TwoStepVerificationComponent","constructor","UtilisateurService","passConfValidator","router","route","JournalisationService","ActionService","controlName","resetPasswordForm","get","invalid","touched","errorName","hasError","resetPasswordFormValue","showError","showSuccess","resetPass","resetPassDto","password","confirmPassword","confirm","token","email","resetPassword","subscribe","next","res","resetPasswordBtn","document","getElementById","disabled","style","backgroundColor","borderColor","color","cursor","EnregistrerAction","error","length","errorMessage","ngOnInit","required","setValidators","validateConfirmPassword","snapshot","queryParams","username","localStorage","getItem","Recherche","data","getJournalisations","id","dataJournalisations","idJournalisation","action","application","date","Date","description","journalisation","EnregistrementActions","console","log","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\two-step-verification.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { IResetPassword } from '../../auth/resetPassword.interface';\r\nimport { UtilisateurService } from './../../Services/utilisateur.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { PasswordConfirmationValidatorService } from './../../auth/password-confirmation-validator.service';\r\nimport { JournalisationService } from '../../Services/journalisation.service';\r\nimport { ActionService } from '../../Services/action.service';\r\nimport { Action } from '../../Models/action.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-two-step-verification',\r\n  templateUrl: './TwoStepVerification.component.html'\r\n})\r\n\r\nexport class TwoStepVerificationComponent implements OnInit {\r\n  resetPasswordForm!: FormGroup;\r\n  showSuccess!: boolean;\r\n  showError!: boolean;\r\n  errorMessage!: string;\r\n  private token!: string;\r\n  private email!: string;\r\n\r\n  constructor(private UtilisateurService: UtilisateurService, private passConfValidator: PasswordConfirmationValidatorService, private router: Router,\r\n              private route: ActivatedRoute, private JournalisationService: JournalisationService,private ActionService: ActionService){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.resetPasswordForm = new FormGroup({\r\n      password: new FormControl('', [Validators.required]),\r\n      confirm: new FormControl('')\r\n    });\r\n    this.resetPasswordForm.get('confirm')!.setValidators([Validators.required,\r\n    this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password')!)]);\r\n    this.token = this.route.snapshot.queryParams['token'];\r\n    this.email = this.route.snapshot.queryParams['email'];\r\n  }\r\n\r\n\r\n  validateControl = (controlName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.invalid && this.resetPasswordForm.get(controlName)!.touched\r\n  }\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n  resetPassword = (resetPasswordFormValue: any) => {\r\n    this.showError = this.showSuccess = false;\r\n    const resetPass = { ...resetPasswordFormValue };\r\n    const resetPassDto: IResetPassword = {\r\n       password: resetPass.password,\r\n       confirmPassword: resetPass.confirm,\r\n       token: this.token,\r\n       email: this.email\r\n    }\r\n        this.UtilisateurService.resetPassword(resetPassDto).subscribe({\r\n          next: (res: Response) => {\r\n            this.showSuccess = true;\r\n            const resetPasswordBtn = document.getElementById('resetPasswordBtn') as HTMLButtonElement;\r\n            resetPasswordBtn.disabled = true;\r\n            resetPasswordBtn.style.backgroundColor = 'lightgray';\r\n            resetPasswordBtn.style.borderColor = '#111';\r\n            resetPasswordBtn.style.color = '#100564';\r\n            resetPasswordBtn.style.cursor = 'not-allowed';\r\n            this.EnregistrerAction();\r\n          },\r\n          error: () => {\r\n            if (resetPass.password.length < 6) {\r\n              this.showError = true;\r\n              this.errorMessage = \"Le mot de passe doit contenir au moin 6 caractère !\";\r\n            }\r\n            else { \r\n            this.showError = true;\r\n            this.errorMessage = \"Le lien de réinitialisation du mot de passe est expiré. Veuillez effectuer une nouvelle demande de réinitialisation si nécessaire.\";\r\n            }\r\n          }\r\n        });        \r\n  }\r\n\r\n\r\n  EnregistrerAction() {\r\n    let username = localStorage.getItem(\"username\");\r\n    this.UtilisateurService.Recherche(username).subscribe((data) => {\r\n      this.JournalisationService.getJournalisations(data[0].id).subscribe((dataJournalisations) => {\r\n        let idJournalisation = dataJournalisations[dataJournalisations.length - 1].id;\r\n        const action: Action = {\r\n          id: 0, application: \"www.wbauth.com\", date: new Date(), description: `l'utilisateur ${username} a consulter la liste des applications `,\r\n          idJournalisation: idJournalisation, journalisation: dataJournalisations[dataJournalisations.length - 1]\r\n        }\r\n        this.ActionService.EnregistrementActions(action).subscribe(() => { console.log(action); });\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}