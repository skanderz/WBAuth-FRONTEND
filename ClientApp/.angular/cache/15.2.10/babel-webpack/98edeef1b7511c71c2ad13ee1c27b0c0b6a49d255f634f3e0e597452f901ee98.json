{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RoleComponent = class RoleComponent {\n  constructor(RoleService, ApplicationService, router, route, ActionService, JournalisationService, UtilisateurService) {\n    this.RoleService = RoleService;\n    this.ApplicationService = ApplicationService;\n    this.router = router;\n    this.route = route;\n    this.ActionService = ActionService;\n    this.JournalisationService = JournalisationService;\n    this.UtilisateurService = UtilisateurService;\n    this.Roles = [];\n    this.applications = [];\n    this.rech = '';\n    this.IdApp = 0;\n  }\n  ngOnInit() {\n    this.ApplicationService.getApplications().subscribe(data => {\n      this.applications = data;\n      if (this.applications && this.applications.length > 0) {\n        this.IdApp = this.applications[0].id;\n        this.loadRoles();\n      }\n    }, error => {\n      console.error('Erreur lors de la récupération des applications : ', error);\n    });\n  }\n  loadRoles() {\n    if (this.applications.length > 0) {\n      this.RoleService.getRoles(this.IdApp).subscribe(data => {\n        this.Roles = data;\n      }, error => {\n        console.error('Erreur lors de la récupération des Roles : ', error);\n      });\n    }\n  }\n  Recherche() {\n    if (this.rech == \"\") {\n      this.loadRoles();\n    } else {\n      this.RoleService.getRoles(this.IdApp).subscribe(data => {\n        this.Roles = data;\n        this.Roles = this.Roles.filter(r => {\n          return r.nom.toLowerCase().includes(this.rech.toLowerCase());\n        });\n      });\n    }\n  }\n  onModifierClick(id) {\n    this.router.navigate(['Role/ModifierRole', id]);\n  }\n  deleteRole(id) {\n    if (confirm('Voulez-vous vraiment supprimer ce Role ?')) {\n      this.RoleService.deleteRole(id, this.IdApp).subscribe(() => {\n        this.loadRoles();\n      });\n    }\n  }\n};\nRoleComponent = __decorate([Component({\n  selector: 'app-Role',\n  templateUrl: './Role.component.html'\n})], RoleComponent);\nexport { RoleComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAkB1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAMxBC,YAAoBC,WAAwB,EAAUC,kBAAsC,EAAUC,MAAc,EAAUC,KAAqB,EAC3IC,aAA4B,EAAUC,qBAA4C,EAAWC,kBAAsC;IADvH,gBAAW,GAAXN,WAAW;IAAuB,uBAAkB,GAAlBC,kBAAkB;IAA8B,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;IAC3H,kBAAa,GAAbC,aAAa;IAAyB,0BAAqB,GAArBC,qBAAqB;IAAkC,uBAAkB,GAAlBC,kBAAkB;IANvH,UAAK,GAAU,EAAE;IACjB,iBAAY,GAAU,EAAE;IACxB,SAAI,GAAW,EAAE;IACjB,UAAK,GAAW,CAAC;EAG6H;EAG9IC,QAAQ;IACN,IAAI,CAACN,kBAAkB,CAACO,eAAe,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MAC3D,IAAI,CAACC,YAAY,GAAGD,IAAI;MACxB,IAAI,IAAI,CAACC,YAAY,IAAI,IAAI,CAACA,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAACC,KAAK,GAAG,IAAI,CAACF,YAAY,CAAC,CAAC,CAAC,CAACG,EAAE;QACpC,IAAI,CAACC,SAAS,EAAE;;IAEpB,CAAC,EACEC,KAAK,IAAI;MAAGC,OAAO,CAACD,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;IAAE,CAAC,CAAC;EAC/F;EAGAD,SAAS;IACP,IAAI,IAAI,CAACJ,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;MAChC,IAAI,CAACZ,WAAW,CAACkB,QAAQ,CAAC,IAAI,CAACL,KAAK,CAAC,CAACJ,SAAS,CAAEC,IAAI,IAAI;QAAG,IAAI,CAACS,KAAK,GAAGT,IAAI;MAAE,CAAC,EAC7EM,KAAK,IAAI;QAAGC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MAAE,CAAC,CAAC;;EAE1F;EAIAI,SAAS;IACP,IAAI,IAAI,CAACC,IAAI,IAAI,EAAE,EAAE;MAAE,IAAI,CAACN,SAAS,EAAE;KAAG,MACrC;MACH,IAAI,CAACf,WAAW,CAACkB,QAAQ,CAAC,IAAI,CAACL,KAAK,CAAC,CAACJ,SAAS,CAAEC,IAAI,IAAI;QACvD,IAAI,CAACS,KAAK,GAAGT,IAAI;QACjB,IAAI,CAACS,KAAK,GAAG,IAAI,CAACA,KAAK,CAACG,MAAM,CAACC,CAAC,IAAG;UAAG,OAAOA,CAAC,CAACC,GAAG,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACL,IAAI,CAACI,WAAW,EAAE,CAAC;QAAE,CAAC,CAAC;MACxG,CAAC,CAAC;;EAEN;EAGAE,eAAe,CAACb,EAAU;IAAI,IAAI,CAACZ,MAAM,CAAC0B,QAAQ,CAAC,CAAC,mBAAmB,EAAEd,EAAE,CAAC,CAAC;EAAE;EAG/Ee,UAAU,CAACf,EAAU;IACnB,IAAIgB,OAAO,CAAC,0CAA0C,CAAC,EAAE;MAAE,IAAI,CAAC9B,WAAW,CAAC6B,UAAU,CAACf,EAAE,EAAE,IAAI,CAACD,KAAK,CAAC,CAACJ,SAAS,CAAC,MAAK;QAAG,IAAI,CAACM,SAAS,EAAE;MAAE,CAAC,CAAC;;EAC/I;CAOD;AAtDYjB,aAAa,eAJzBD,SAAS,CAAC;EACTkC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;CACd,CAAC,GACWlC,aAAa,CAsDzB;SAtDYA,aAAa","names":["Component","RoleComponent","constructor","RoleService","ApplicationService","router","route","ActionService","JournalisationService","UtilisateurService","ngOnInit","getApplications","subscribe","data","applications","length","IdApp","id","loadRoles","error","console","getRoles","Roles","Recherche","rech","filter","r","nom","toLowerCase","includes","onModifierClick","navigate","deleteRole","confirm","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\Modules\\Role\\Role.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Role } from '../../Models/role.model';\r\nimport { filter, Observable } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { RoleService } from '../../Services/role.service';\r\nimport { Application } from '../../Models/application.model';\r\nimport { ApplicationService } from '../../Services/application.service';\r\nimport { JournalisationService } from '../../../Services/journalisation.service';\r\nimport { UtilisateurService } from './../../../Services/utilisateur.service';\r\nimport { ActionService } from '../../../Services/action.service';\r\nimport { Action } from '../../../Models/action.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-Role',\r\n  templateUrl: './Role.component.html'\r\n})\r\nexport class RoleComponent {\r\n  Roles: any[] = [];\r\n  applications: any[] = [];\r\n  rech: string = '';\r\n  IdApp: number = 0;\r\n\r\n  constructor(private RoleService: RoleService, private ApplicationService: ApplicationService, private router: Router, private route: ActivatedRoute,\r\n  private ActionService: ActionService, private JournalisationService: JournalisationService , private UtilisateurService: UtilisateurService){ }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.ApplicationService.getApplications().subscribe((data) => {\r\n      this.applications = data\r\n      if (this.applications && this.applications.length > 0) {\r\n        this.IdApp = this.applications[0].id;\r\n        this.loadRoles();\r\n      }\r\n    },\r\n      (error) => { console.error('Erreur lors de la récupération des applications : ', error); });\r\n  }\r\n\r\n\r\n  loadRoles() {\r\n    if (this.applications.length > 0) {\r\n      this.RoleService.getRoles(this.IdApp).subscribe((data) => { this.Roles = data; },\r\n        (error) => { console.error('Erreur lors de la récupération des Roles : ', error); });\r\n    }\r\n  }\r\n\r\n\r\n\r\n  Recherche() {\r\n    if (this.rech == \"\") { this.loadRoles(); }\r\n    else {\r\n      this.RoleService.getRoles(this.IdApp).subscribe((data) => {\r\n        this.Roles = data;\r\n        this.Roles = this.Roles.filter(r => { return r.nom.toLowerCase().includes(this.rech.toLowerCase()); });\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  onModifierClick(id: number) { this.router.navigate(['Role/ModifierRole', id]); }\r\n\r\n\r\n  deleteRole(id: number) {\r\n    if (confirm('Voulez-vous vraiment supprimer ce Role ?')) { this.RoleService.deleteRole(id, this.IdApp).subscribe(() => { this.loadRoles(); }); }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}