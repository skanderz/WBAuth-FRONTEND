{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../Services/utilisateur.service\";\nimport * as i2 from \"./../../auth/password-confirmation-validator.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../Services/journalisation.service\";\nimport * as i5 from \"../../Services/action.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelement(1, \"span\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.errorMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ResetPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" Votre mot de passe a \\u00E9t\\u00E9 r\\u00E9initialis\\u00E9 avec succ\\u00E8s ! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_em_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Saisir le mot de passe !\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_em_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Saisir la confirmation de mot de passe !\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_em_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\", 17);\n    i0.ɵɵtext(1, \"Les mots de passe doivent \\u00EAtre identiques !\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"/Authentification\"];\n};\nexport class ResetPasswordComponent {\n  constructor(UtilisateurService, passConfValidator, router, route, JournalisationService, ActionService) {\n    this.UtilisateurService = UtilisateurService;\n    this.passConfValidator = passConfValidator;\n    this.router = router;\n    this.route = route;\n    this.JournalisationService = JournalisationService;\n    this.ActionService = ActionService;\n    this.validateControl = controlName => {\n      return this.resetPasswordForm.get(controlName).invalid && this.resetPasswordForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.resetPasswordForm.get(controlName).hasError(errorName);\n    };\n    this.resetPassword = resetPasswordFormValue => {\n      this.showError = this.showSuccess = false;\n      const resetPass = {\n        ...resetPasswordFormValue\n      };\n      const resetPassDto = {\n        password: resetPass.password,\n        confirmPassword: resetPass.confirm,\n        token: this.token,\n        email: this.email\n      };\n      this.UtilisateurService.resetPassword(resetPassDto).subscribe({\n        next: res => {\n          this.showSuccess = true;\n          const resetPasswordBtn = document.getElementById('resetPasswordBtn');\n          resetPasswordBtn.disabled = true;\n          resetPasswordBtn.style.backgroundColor = 'lightgray';\n          resetPasswordBtn.style.borderColor = '#111';\n          resetPasswordBtn.style.color = '#100564';\n          resetPasswordBtn.style.cursor = 'not-allowed';\n          this.EnregistrerAction();\n        },\n        error: () => {\n          if (resetPass.password.length < 6) {\n            this.showError = true;\n            this.errorMessage = \"Le mot de passe doit contenir au moin 6 caractère !\";\n          } else {\n            this.showError = true;\n            this.errorMessage = \"Le lien de réinitialisation du mot de passe est expiré. Veuillez effectuer une nouvelle demande de réinitialisation si nécessaire.\";\n          }\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.resetPasswordForm = new FormGroup({\n      password: new FormControl('', [Validators.required]),\n      confirm: new FormControl('')\n    });\n    this.resetPasswordForm.get('confirm').setValidators([Validators.required, this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password'))]);\n    this.token = this.route.snapshot.queryParams['token'];\n    this.email = this.route.snapshot.queryParams['email'];\n  }\n  EnregistrerAction() {\n    let username = localStorage.getItem(\"username\");\n    this.UtilisateurService.Recherche(username).subscribe(data => {\n      this.JournalisationService.getJournalisations(data.id).subscribe(dataJournalisations => {\n        let idJournalisation = dataJournalisations[dataJournalisations.length - 1].id;\n        const action = {\n          id: 0,\n          application: \"www.wbauth.com\",\n          date: new Date(),\n          description: `l'utilisateur ${username} a changé le mot de passe `,\n          idJournalisation: idJournalisation,\n          journalisation: dataJournalisations[dataJournalisations.length - 1]\n        };\n        this.ActionService.EnregistrementActions(idJournalisation, action).subscribe(() => {});\n      });\n    });\n  }\n  static #_ = this.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UtilisateurService), i0.ɵɵdirectiveInject(i2.PasswordConfirmationValidatorService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.JournalisationService), i0.ɵɵdirectiveInject(i5.ActionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 18,\n    vars: 9,\n    consts: [[1, \"AccueilContent\", 2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\"], [\"src\", \"../../assets/Images/PC-AccueilPrincipale.png\", 2, \"width\", \"350px\", \"height\", \"350px\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", \"justify-content\", \"center\", \"align-items\", \"center\", \"margin\", \"0px 0px 0px -20px\"], [\"src\", \"../../assets/Images/WBConcept-AccueilPrincipale.png\", 2, \"max-width\", \"325px\"], [\"style\", \"max-width:600px;\", \"class\", \"alert alert-danger centered-element\", \"role\", \"alert\", 4, \"ngIf\"], [\"style\", \"max-width:600px;\", \"class\", \"alert alert-success centered-element\", \"role\", \"alert\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 1, \"register\", 3, \"formGroup\", \"ngSubmit\"], [4, \"ngIf\"], [\"type\", \"password\", \"id\", \"password\", \"placeholder\", \"MOT DE PASSE\", \"formControlName\", \"password\", 1, \"auth-field\"], [\"type\", \"password\", \"id\", \"confirm\", \"placeholder\", \"CONFIRMATION MOT DE PASSE\", \"formControlName\", \"confirm\", 1, \"auth-field\"], [\"style\", \"transform:translateY(-10px)\", 4, \"ngIf\"], [\"id\", \"resetPasswordBtn\", \"type\", \"submit\", 1, \"auth-btn\", 3, \"disabled\"], [2, \"color\", \"#C4BDF6\", \"padding-top\", \"5px\"], [1, \"mdp-oubli\\u00E9\", 3, \"routerLink\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\", \"centered-element\", 2, \"max-width\", \"600px\"], [3, \"innerHTML\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\", \"centered-element\", 2, \"max-width\", \"600px\"], [2, \"transform\", \"translateY(-10px)\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵtemplate(4, ResetPasswordComponent_div_4_Template, 2, 1, \"div\", 4);\n        i0.ɵɵtemplate(5, ResetPasswordComponent_div_5_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementStart(6, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.resetPassword(ctx.resetPasswordForm.value);\n        });\n        i0.ɵɵtemplate(7, ResetPasswordComponent_em_7_Template, 2, 0, \"em\", 7);\n        i0.ɵɵelement(8, \"input\", 8);\n        i0.ɵɵtemplate(9, ResetPasswordComponent_em_9_Template, 2, 0, \"em\", 7);\n        i0.ɵɵelement(10, \"input\", 9);\n        i0.ɵɵtemplate(11, ResetPasswordComponent_em_11_Template, 2, 0, \"em\", 10);\n        i0.ɵɵelementStart(12, \"button\", 11);\n        i0.ɵɵtext(13, \"VALIDER\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 12);\n        i0.ɵɵtext(15, \" \\u2022\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2022 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 13);\n        i0.ɵɵtext(17, \" Revenir \\u00E0 l'\\u00E9cran de l'accueil \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"confirm\") && ctx.hasError(\"confirm\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"confirm\", \"mustMatch\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.resetPasswordForm.valid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(8, _c0));\n      }\n    },\n    dependencies: [i6.NgIf, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.FormGroupDirective, i7.FormControlName, i3.RouterLink],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","ResetPasswordComponent","constructor","UtilisateurService","passConfValidator","router","route","JournalisationService","ActionService","controlName","resetPasswordForm","get","invalid","touched","errorName","hasError","resetPasswordFormValue","showError","showSuccess","resetPass","resetPassDto","password","confirmPassword","confirm","token","email","resetPassword","subscribe","next","res","resetPasswordBtn","document","getElementById","disabled","style","backgroundColor","borderColor","color","cursor","EnregistrerAction","error","length","errorMessage","ngOnInit","required","setValidators","validateConfirmPassword","snapshot","queryParams","username","localStorage","getItem","Recherche","data","getJournalisations","id","dataJournalisations","idJournalisation","action","application","date","Date","description","journalisation","EnregistrementActions","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\reset-password.component.ts","C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\reset-password.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { IResetPassword } from '../../auth/resetPassword.interface';\r\nimport { UtilisateurService } from './../../Services/utilisateur.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { PasswordConfirmationValidatorService } from './../../auth/password-confirmation-validator.service';\r\nimport { JournalisationService } from '../../Services/journalisation.service';\r\nimport { ActionService } from '../../Services/action.service';\r\nimport { Journalisation } from '../../Models/journalisation.model';\r\nimport { Action } from '../../Models/action.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html'\r\n})\r\n\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm!: FormGroup;\r\n  showSuccess!: boolean;\r\n  showError!: boolean;\r\n  errorMessage!: string;\r\n  private token!: string;\r\n  private email!: string;\r\n\r\n  constructor(private UtilisateurService: UtilisateurService, private passConfValidator: PasswordConfirmationValidatorService, private router: Router,\r\n              private route: ActivatedRoute, private JournalisationService: JournalisationService,private ActionService: ActionService){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.resetPasswordForm = new FormGroup({\r\n      password: new FormControl('', [Validators.required]),\r\n      confirm: new FormControl('')\r\n    });\r\n    this.resetPasswordForm.get('confirm')!.setValidators([Validators.required,\r\n    this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password')!)]);\r\n    this.token = this.route.snapshot.queryParams['token'];\r\n    this.email = this.route.snapshot.queryParams['email'];\r\n  }\r\n\r\n\r\n  validateControl = (controlName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.invalid && this.resetPasswordForm.get(controlName)!.touched\r\n  }\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n  resetPassword = (resetPasswordFormValue: any) => {\r\n    this.showError = this.showSuccess = false;\r\n    const resetPass = { ...resetPasswordFormValue };\r\n    const resetPassDto: IResetPassword = {\r\n       password: resetPass.password,\r\n       confirmPassword: resetPass.confirm,\r\n       token: this.token,\r\n       email: this.email\r\n    }\r\n        this.UtilisateurService.resetPassword(resetPassDto).subscribe({\r\n          next: (res: Response) => {\r\n            this.showSuccess = true;\r\n            const resetPasswordBtn = document.getElementById('resetPasswordBtn') as HTMLButtonElement;\r\n            resetPasswordBtn.disabled = true;\r\n            resetPasswordBtn.style.backgroundColor = 'lightgray';\r\n            resetPasswordBtn.style.borderColor = '#111';\r\n            resetPasswordBtn.style.color = '#100564';\r\n            resetPasswordBtn.style.cursor = 'not-allowed';\r\n            this.EnregistrerAction();\r\n          },\r\n          error: () => {\r\n            if (resetPass.password.length < 6) {\r\n              this.showError = true;\r\n              this.errorMessage = \"Le mot de passe doit contenir au moin 6 caractère !\";\r\n            }\r\n            else { \r\n            this.showError = true;\r\n            this.errorMessage = \"Le lien de réinitialisation du mot de passe est expiré. Veuillez effectuer une nouvelle demande de réinitialisation si nécessaire.\";\r\n            }\r\n          }\r\n        });        \r\n  }\r\n\r\n\r\n  EnregistrerAction() {\r\n    let username = localStorage.getItem(\"username\");\r\n    this.UtilisateurService.Recherche(username).subscribe((data) => {\r\n      this.JournalisationService.getJournalisations(data.id).subscribe((dataJournalisations) => {\r\n        let idJournalisation = dataJournalisations[dataJournalisations.length - 1].id;\r\n        const action: Action = {\r\n          id: 0, application: \"www.wbauth.com\", date: new Date(), description: `l'utilisateur ${username} a changé le mot de passe `,\r\n          idJournalisation: idJournalisation, journalisation: dataJournalisations[dataJournalisations.length - 1]\r\n        }\r\n        this.ActionService.EnregistrementActions(idJournalisation ,action).subscribe(() => {})\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n}\r\n","<div class=\"AccueilContent\" style=\"display:flex; justify-content:center; align-items:center;\">\r\n\r\n  <img src=\"../../assets/Images/PC-AccueilPrincipale.png\" style=\"width:350px; height:350px\" />\r\n\r\n  <div style=\"display:flex; flex-direction:column; justify-content:center; align-items:center; margin:0px 0px 0px -20px;\">\r\n    <img src=\"../../assets/Images/WBConcept-AccueilPrincipale.png\" style=\"max-width:325px;\" />\r\n    <div style=\"max-width:600px;\" *ngIf=\"showError\" class=\"alert alert-danger centered-element\" role=\"alert\"> <span [innerHTML]=\"errorMessage\"></span>  </div>\r\n    <div style=\"max-width:600px;\" *ngIf=\"showSuccess\" class=\"alert alert-success centered-element\" role=\"alert\"> Votre mot de passe a été réinitialisé avec succès ! </div>\r\n\r\n    <form class=\"register\" [formGroup]=\"resetPasswordForm\" autocomplete=\"off\" novalidate (ngSubmit)=\"resetPassword(resetPasswordForm.value)\">\r\n\r\n      <em *ngIf=\"validateControl('password') && hasError('password', 'required')\">Saisir le mot de passe !</em>\r\n      <input class=\"auth-field\" type=\"password\" id=\"password\" placeholder=\"MOT DE PASSE\" formControlName=\"password\" />\r\n\r\n      <em *ngIf=\"validateControl('confirm') && hasError('confirm', 'required')\">Saisir la confirmation de mot de passe !</em>\r\n      <input class=\"auth-field\" type=\"password\" id=\"confirm\" placeholder=\"CONFIRMATION MOT DE PASSE\" formControlName=\"confirm\" />\r\n      <em *ngIf=\"hasError('confirm', 'mustMatch')\" style=\"transform:translateY(-10px)\">Les mots de passe doivent être identiques !</em>\r\n\r\n      <button id=\"resetPasswordBtn\" type=\"submit\" class=\"auth-btn\" [disabled]=\"!resetPasswordForm.valid\">VALIDER</button>\r\n      <div style=\"color:#C4BDF6; padding-top: 5px\"> •────────────────────────• </div>\r\n      <div class=\"mdp-oublié\" [routerLink]=\"['/Authentification']\">  Revenir à l'écran de l'accueil </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}