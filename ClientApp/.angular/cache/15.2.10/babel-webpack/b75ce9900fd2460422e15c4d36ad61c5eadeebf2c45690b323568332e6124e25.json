{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../Services/utilisateur.service\";\nimport * as i2 from \"./../../auth/password-confirmation-validator.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelement(1, \"span\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.errorMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nconst _c0 = function () {\n  return [\"/Authentification\"];\n};\nfunction ResetPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" Votre mot de passe a \\u00E9t\\u00E9 r\\u00E9initialis\\u00E9. Veuillez \");\n    i0.ɵɵelementStart(2, \"a\", 17);\n    i0.ɵɵtext(3, \" cliquer ici pour vous connecter. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nfunction ResetPasswordComponent_em_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Saisir le mot de passe !\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_em_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Saisir la confirmation de mot de passe !\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_em_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\", 18);\n    i0.ɵɵtext(1, \"Les mots de passe doivent \\u00EAtre identiques !\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(UtilisateurService, passConfValidator, route) {\n    this.UtilisateurService = UtilisateurService;\n    this.passConfValidator = passConfValidator;\n    this.route = route;\n    this.validateControl = controlName => {\n      return this.resetPasswordForm.get(controlName).invalid && this.resetPasswordForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.resetPasswordForm.get(controlName).hasError(errorName);\n    };\n    this.resetPassword = resetPasswordFormValue => {\n      this.showError = this.showSuccess = false;\n      const resetPass = {\n        ...resetPasswordFormValue\n      };\n      const resetPassDto = {\n        password: resetPass.password,\n        confirmPassword: resetPass.confirm,\n        token: this.token,\n        email: this.email\n      };\n      this.UtilisateurService.resetPassword(resetPassDto).subscribe({\n        next: _ => this.showSuccess = true,\n        error: err => {\n          this.showError = true;\n          this.errorMessage = err.message;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.resetPasswordForm = new FormGroup({\n      password: new FormControl('', [Validators.required]),\n      confirm: new FormControl('')\n    });\n    this.resetPasswordForm.get('confirm').setValidators([Validators.required, this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password'))]);\n    this.token = this.route.snapshot.queryParams['token'];\n    this.email = this.route.snapshot.queryParams['email'];\n  }\n  static #_ = this.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UtilisateurService), i0.ɵɵdirectiveInject(i2.PasswordConfirmationValidatorService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 18,\n    vars: 9,\n    consts: [[1, \"AccueilContent\", 2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\"], [\"src\", \"../../assets/Images/PC-AccueilPrincipale.png\", 2, \"width\", \"350px\", \"height\", \"350px\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", \"justify-content\", \"center\", \"align-items\", \"center\", \"margin\", \"0px 0px 0px -20px\"], [\"src\", \"../../assets/Images/WBConcept-AccueilPrincipale.png\", 2, \"width\", \"70%\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", \"role\", \"alert\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 1, \"register\", 3, \"formGroup\", \"ngSubmit\"], [4, \"ngIf\"], [\"type\", \"password\", \"id\", \"password\", \"placeholder\", \"MOT DE PASSE\", \"formControlName\", \"password\", 1, \"auth-field\"], [\"type\", \"password\", \"id\", \"confirm\", \"placeholder\", \"CONFIRMATION MOT DE PASSE\", \"formControlName\", \"confirm\", 1, \"auth-field\"], [\"style\", \"transform:translateY(-10px)\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"auth-btn\", 3, \"disabled\"], [2, \"color\", \"#C4BDF6\", \"padding-top\", \"5px\"], [1, \"mdp-oubli\\u00E9\", 3, \"routerLink\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [3, \"innerHTML\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [3, \"routerLink\"], [2, \"transform\", \"translateY(-10px)\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵtemplate(4, ResetPasswordComponent_div_4_Template, 2, 1, \"div\", 4);\n        i0.ɵɵtemplate(5, ResetPasswordComponent_div_5_Template, 4, 2, \"div\", 5);\n        i0.ɵɵelementStart(6, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.resetPassword(ctx.resetPasswordForm.value);\n        });\n        i0.ɵɵtemplate(7, ResetPasswordComponent_em_7_Template, 2, 0, \"em\", 7);\n        i0.ɵɵelement(8, \"input\", 8);\n        i0.ɵɵtemplate(9, ResetPasswordComponent_em_9_Template, 2, 0, \"em\", 7);\n        i0.ɵɵelement(10, \"input\", 9);\n        i0.ɵɵtemplate(11, ResetPasswordComponent_em_11_Template, 2, 0, \"em\", 10);\n        i0.ɵɵelementStart(12, \"button\", 11);\n        i0.ɵɵtext(13, \"VALIDER\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 12);\n        i0.ɵɵtext(15, \" \\u2022\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2022 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 13);\n        i0.ɵɵtext(17, \" Revenir \\u00E0 l'\\u00E9cran de connexion \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"confirm\") && ctx.hasError(\"confirm\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"confirm\", \"mustMatch\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.resetPasswordForm.valid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(8, _c0));\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i3.RouterLink],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","ResetPasswordComponent","constructor","UtilisateurService","passConfValidator","route","controlName","resetPasswordForm","get","invalid","touched","errorName","hasError","resetPasswordFormValue","showError","showSuccess","resetPass","resetPassDto","password","confirmPassword","confirm","token","email","resetPassword","subscribe","next","_","error","err","errorMessage","message","ngOnInit","required","setValidators","validateConfirmPassword","snapshot","queryParams","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\reset-password.component.ts","C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilPrincipale\\Authentification\\reset-password.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { IResetPassword } from '../../auth/resetPassword.interface';\r\nimport { UtilisateurService } from './../../Services/utilisateur.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { PasswordConfirmationValidatorService } from './../../auth/password-confirmation-validator.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html'\r\n})\r\n\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm!: FormGroup;\r\n  showSuccess!: boolean;\r\n  showError!: boolean;\r\n  errorMessage!: string;\r\n  private token!: string;\r\n  private email!: string;\r\n  constructor(private UtilisateurService: UtilisateurService, private passConfValidator: PasswordConfirmationValidatorService,\r\n    private route: ActivatedRoute){}\r\n\r\n  ngOnInit(): void {\r\n    this.resetPasswordForm = new FormGroup({\r\n      password: new FormControl('', [Validators.required]),\r\n      confirm: new FormControl('')\r\n    });\r\n    this.resetPasswordForm.get('confirm')!.setValidators([Validators.required,\r\n    this.passConfValidator.validateConfirmPassword(this.resetPasswordForm.get('password')!)]);\r\n    this.token = this.route.snapshot.queryParams['token'];\r\n    this.email = this.route.snapshot.queryParams['email'];\r\n  }\r\n\r\n\r\n  validateControl = (controlName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.invalid && this.resetPasswordForm.get(controlName)!.touched\r\n  }\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n     return this.resetPasswordForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n  resetPassword = (resetPasswordFormValue: any) => {\r\n    this.showError = this.showSuccess = false;\r\n    const resetPass = { ...resetPasswordFormValue };\r\n    const resetPassDto: IResetPassword = {\r\n       password: resetPass.password,\r\n       confirmPassword: resetPass.confirm,\r\n       token: this.token,\r\n       email: this.email\r\n    }\r\n    this.UtilisateurService.resetPassword(resetPassDto).subscribe({\r\n       next: (_) => this.showSuccess = true,\r\n       error: (err: HttpErrorResponse) => {\r\n         this.showError = true;\r\n         this.errorMessage = err.message;\r\n       }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  \r\n}\r\n","<div class=\"AccueilContent\" style=\"display:flex; justify-content:center; align-items:center;\">\r\n\r\n  <img src=\"../../assets/Images/PC-AccueilPrincipale.png\" style=\"width:350px; height:350px\" />\r\n\r\n  <div style=\"display:flex; flex-direction:column; justify-content:center; align-items:center; margin:0px 0px 0px -20px;\">\r\n    <img src=\"../../assets/Images/WBConcept-AccueilPrincipale.png\" style=\"width:70%;\" />\r\n    <div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\"> <span [innerHTML]=\"errorMessage\"></span>  </div>\r\n    <div *ngIf=\"showSuccess\" class=\"alert alert-success\" role=\"alert\">\r\n      Votre mot de passe a été réinitialisé. Veuillez <a [routerLink]=\"['/Authentification']\"> cliquer ici pour vous connecter. </a>\r\n    </div>\r\n\r\n    <form class=\"register\" [formGroup]=\"resetPasswordForm\" autocomplete=\"off\" novalidate (ngSubmit)=\"resetPassword(resetPasswordForm.value)\">\r\n      <em *ngIf=\"validateControl('password') && hasError('password', 'required')\">Saisir le mot de passe !</em>\r\n      <input class=\"auth-field\" type=\"password\" id=\"password\" placeholder=\"MOT DE PASSE\" formControlName=\"password\" />\r\n\r\n      <em *ngIf=\"validateControl('confirm') && hasError('confirm', 'required')\">Saisir la confirmation de mot de passe !</em>\r\n      <input class=\"auth-field\" type=\"password\" id=\"confirm\" placeholder=\"CONFIRMATION MOT DE PASSE\" formControlName=\"confirm\" />\r\n      <em *ngIf=\"hasError('confirm', 'mustMatch')\" style=\"transform:translateY(-10px)\">Les mots de passe doivent être identiques !</em>\r\n\r\n      <button type=\"submit\" class=\"auth-btn\" [disabled]=\"!resetPasswordForm.valid\">VALIDER</button>\r\n      <div style=\"color:#C4BDF6; padding-top: 5px\"> •────────────────────────• </div>\r\n      <div class=\"mdp-oublié\" [routerLink]=\"['/Authentification']\">  Revenir à l'écran de connexion </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}