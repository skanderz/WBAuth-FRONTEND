{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport class UtilisateurService {\n  constructor(http, jwtHelper) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.apiUrl = environment.apiUrl + 'Utilisateur';\n    this.authChangeSub = new Subject();\n    this.authChanged = this.authChangeSub.asObservable();\n    this.logout = () => {\n      localStorage.removeItem(\"token\");\n      this.sendAuthStateChangeNotification(false);\n    };\n    this.sendAuthStateChangeNotification = isAuthenticated => {\n      this.authChangeSub.next(isAuthenticated);\n    };\n    this.isUserAuthenticated = () => {\n      const token = localStorage.getItem(\"token\");\n      let bool;\n      if (token && !this.jwtHelper.isTokenExpired(token)) {\n        bool = true;\n      } else bool = false;\n      console.log(\"token : \" + bool);\n      return bool;\n    };\n  }\n  Inscription(Utilisateur) {\n    return this.http.post(this.apiUrl + \"/inscription\", Utilisateur);\n  }\n  login(login) {\n    return this.http.post(this.apiUrl + \"/login\", login);\n  }\n  getUtilisateurs() {\n    return this.http.get(this.apiUrl + \"/List\");\n  }\n  getUtilisateur(id) {\n    return this.http.get(`${this.apiUrl}/Get/${id}`);\n  }\n  Recherche(rech) {\n    return this.http.get(`${this.apiUrl}/${rech}`);\n  }\n  addUtilisateur(Utilisateur) {\n    return this.http.post(this.apiUrl + \"/ajouter\", Utilisateur);\n  }\n  updateUtilisateur(id, Utilisateur) {\n    return this.http.put(`${this.apiUrl}/modifier/${id}`, Utilisateur);\n  }\n  deleteUtilisateur(Id) {\n    console.log();\n    return this.http.delete(`${this.apiUrl}/supprimer/${Id}`);\n  }\n  static #_ = this.ɵfac = function UtilisateurService_Factory(t) {\n    return new (t || UtilisateurService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilisateurService,\n    factory: UtilisateurService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,8BAA8B;AAG1D,SAAqBC,OAAO,QAAQ,MAAM;;;;AAI1C,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,IAAgB,EAAUC,SAA2B;IAArD,SAAI,GAAJD,IAAI;IAAsB,cAAS,GAATC,SAAS;IAJ/C,WAAM,GAAGL,WAAW,CAACM,MAAM,GAAG,aAAa;IAC3C,kBAAa,GAAG,IAAIL,OAAO,EAAW;IACvC,gBAAW,GAAG,IAAI,CAACM,aAAa,CAACC,YAAY,EAAE;IAYtD,WAAM,GAAG,MAAK;MACZC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;MAChC,IAAI,CAACC,+BAA+B,CAAC,KAAK,CAAC;IAC7C,CAAC;IAED,oCAA+B,GAAIC,eAAwB,IAAI;MAC7D,IAAI,CAACL,aAAa,CAACM,IAAI,CAACD,eAAe,CAAC;IAC1C,CAAC;IAED,wBAAmB,GAAG,MAAc;MAClC,MAAME,KAAK,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIC,IAAc;MAClB,IAAIF,KAAK,IAAI,CAAC,IAAI,CAACT,SAAS,CAACY,cAAc,CAACH,KAAK,CAAC,EAAE;QAAEE,IAAI,GAAG,IAAI;OAAG,MAAMA,IAAI,GAAG,KAAK;MACtFE,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGH,IAAI,CAAC;MAC9B,OAAOA,IAAI;IACb,CAAC;EAzB0E;EAE3EI,WAAW,CAACC,WAAgB;IAC1B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAM,IAAI,CAAChB,MAAM,GAAG,cAAc,EAAEe,WAAW,CAAC;EACvE;EAEAE,KAAK,CAACA,KAAU;IACd,OAAO,IAAI,CAACnB,IAAI,CAACkB,IAAI,CAAC,IAAI,CAAChB,MAAM,GAAG,QAAQ,EAAEiB,KAAK,CAAC;EACtD;EAmBAC,eAAe;IACb,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAQ,IAAI,CAACnB,MAAM,GAAG,OAAO,CAAC;EACpD;EAEAoB,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACvB,IAAI,CAACqB,GAAG,CAAM,GAAG,IAAI,CAACnB,MAAM,QAAQqB,EAAE,EAAE,CAAC;EACvD;EAEAC,SAAS,CAACC,IAAY;IACpB,OAAO,IAAI,CAACzB,IAAI,CAACqB,GAAG,CAAM,GAAG,IAAI,CAACnB,MAAM,IAAIuB,IAAI,EAAE,CAAC;EACrD;EAEAC,cAAc,CAACT,WAAgB;IAC7B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAM,IAAI,CAAChB,MAAM,GAAG,UAAU,EAAEe,WAAW,CAAC;EACnE;EAEAU,iBAAiB,CAACJ,EAAgB,EAAEN,WAAgB;IAClD,OAAO,IAAI,CAACjB,IAAI,CAAC4B,GAAG,CAAM,GAAG,IAAI,CAAC1B,MAAM,aAAaqB,EAAE,EAAE,EAAEN,WAAW,CAAC;EACzE;EAEAY,iBAAiB,CAACC,EAAU;IAC1BhB,OAAO,CAACC,GAAG,EAAE;IACb,OAAO,IAAI,CAACf,IAAI,CAAC+B,MAAM,CAAM,GAAG,IAAI,CAAC7B,MAAM,cAAc4B,EAAE,EAAE,CAAC;EAChE;EAAC;qBAvDUhC,kBAAkB;EAAA;EAAA;WAAlBA,kBAAkB;IAAAkC,SAAlBlC,kBAAkB;IAAAmC,YADJ;EAAM","names":["environment","Subject","UtilisateurService","constructor","http","jwtHelper","apiUrl","authChangeSub","asObservable","localStorage","removeItem","sendAuthStateChangeNotification","isAuthenticated","next","token","getItem","bool","isTokenExpired","console","log","Inscription","Utilisateur","post","login","getUtilisateurs","get","getUtilisateur","id","Recherche","rech","addUtilisateur","updateUtilisateur","put","deleteUtilisateur","Id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\Services\\utilisateur.service.ts"],"sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable({  providedIn: 'root',})\r\nexport class UtilisateurService {\r\n  private apiUrl = environment.apiUrl + 'Utilisateur'; \r\n  private authChangeSub = new Subject<boolean>()\r\n  public authChanged = this.authChangeSub.asObservable();\r\n\r\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService){}\r\n\r\n  Inscription(Utilisateur: any): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl + \"/inscription\" ,Utilisateur);\r\n  }\r\n\r\n  login(login: any): Observable<any> {\r\n    return this.http.post(this.apiUrl + \"/login\", login);\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    this.sendAuthStateChangeNotification(false);\r\n  }\r\n\r\n  sendAuthStateChangeNotification = (isAuthenticated: boolean) => {\r\n    this.authChangeSub.next(isAuthenticated);\r\n  }\r\n\r\n  isUserAuthenticated = (): boolean => {\r\n    const token = localStorage.getItem(\"token\");\r\n    let bool!: boolean;\r\n    if (token && !this.jwtHelper.isTokenExpired(token)) { bool = true; } else bool = false;\r\n    console.log(\"token : \" + bool)\r\n    return bool;\r\n  }\r\n\r\n  getUtilisateurs(): Observable<any[]> {\r\n    return this.http.get<any[]>(this.apiUrl + \"/List\");\r\n  }\r\n\r\n  getUtilisateur(id: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/Get/${id}`);\r\n  }\r\n\r\n  Recherche(rech: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/${rech}`);\r\n  }\r\n\r\n  addUtilisateur(Utilisateur: any): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl + \"/ajouter\", Utilisateur);\r\n  }\r\n\r\n  updateUtilisateur(id:string | null ,Utilisateur: any): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/modifier/${id}`, Utilisateur);\r\n  }\r\n\r\n  deleteUtilisateur(Id: string): Observable<any> {\r\n    console.log()\r\n    return this.http.delete<any>(`${this.apiUrl}/supprimer/${Id}`);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}