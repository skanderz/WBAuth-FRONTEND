{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PermissionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl + 'Permission';\n    this.apiUrlDAO = environment.apiUrl + 'PermissionControllerDAO';\n  }\n  getListeMultiFonction(IdApplication, IdRole) {\n    return this.http.get(`${this.apiUrl}/ListeMultiFonction/${IdApplication}/${IdRole}`);\n  }\n  getListeFonctionUnique(IdApplication, IdRole) {\n    return this.http.get(`${this.apiUrl}/ListeFonctionUnique/${IdApplication}/${IdRole}`);\n  }\n  getFonctionUnique(Id) {\n    return this.http.get(`${this.apiUrl}/RechercheFonctionUnique/Get/${Id}`);\n  }\n  getMultiFonction(Id) {\n    return this.http.get(`${this.apiUrl}/RechercheMultiFonction/Get/${Id}`);\n  }\n  RechFonctionUnique(rech, IdApplication, IdRole) {\n    return this.http.get(`${this.apiUrlDAO}/RechercheFonctionUnique/${rech}/${IdApplication}/${IdRole}`);\n  }\n  RechMultiFonction(rech, IdApplication, IdRole) {\n    return this.http.get(`${this.apiUrlDAO}/RechercheMultiFonction/${rech}/${IdApplication}/${IdRole}`);\n  }\n  addPermission(Permission) {\n    return this.http.post(this.apiUrl + \"/ajouter\", Permission);\n  }\n  updatePermission(Permission) {\n    return this.http.put(this.apiUrl + \"/modifier\", Permission);\n  }\n  ModifierAcces(IdApplication, i, Permission) {\n    return this.http.put(`${this.apiUrl}/modifierAcces?idApplication=${IdApplication}&i=${i}`, Permission);\n  }\n  deletePermission(id) {\n    return this.http.delete(`${this.apiUrl}/supprimer?id=${id}`);\n  }\n  static #_ = this.ɵfac = function PermissionService_Factory(t) {\n    return new (t || PermissionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PermissionService,\n    factory: PermissionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,8BAA8B;;;AAQ1D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAGH,WAAW,CAACI,MAAM,GAAG,YAAY;IAC1C,cAAS,GAAGJ,WAAW,CAACI,MAAM,GAAG,yBAAyB;EAE1B;EAExCC,qBAAqB,CAACC,aAAoB,EAAEC,MAAc;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,uBAAuBE,aAAa,IAAIC,MAAM,EAAE,CAAC;EAC7F;EAEAE,sBAAsB,CAACH,aAAqB,EAAEC,MAAc;IAC1D,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,wBAAwBE,aAAa,IAAIC,MAAM,EAAE,CAAC;EAC9F;EAEAG,iBAAiB,CAACC,EAAS;IACzB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,gCAAgCO,EAAE,EAAE,CAAC;EACjF;EAEAC,gBAAgB,CAACD,EAAU;IACzB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,+BAA+BO,EAAE,EAAE,CAAC;EAChF;EAEAE,kBAAkB,CAACC,IAAmB,EAAER,aAAqB,EAAEC,MAAc;IAC3E,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACO,SAAS,4BAA4BD,IAAI,IAAIR,aAAa,IAAIC,MAAM,EAAE,CAAC;EAC7G;EAEAS,iBAAiB,CAACF,IAAmB,EAAER,aAAqB,EAAEC,MAAc;IAC1E,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACO,SAAS,2BAA2BD,IAAI,IAAIR,aAAa,IAAIC,MAAM,EAAE,CAAC;EAC5G;EAEAU,aAAa,CAACC,UAAe;IAC3B,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,IAAI,CAACf,MAAM,GAAG,UAAU,EAAEc,UAAU,CAAC;EAClE;EAEAE,gBAAgB,CAACF,UAAe;IAC9B,OAAO,IAAI,CAACf,IAAI,CAACkB,GAAG,CAAM,IAAI,CAACjB,MAAM,GAAG,WAAW,EAAEc,UAAU,CAAC;EAClE;EAEAI,aAAa,CAAChB,aAAqB,EAAEiB,CAAS,EAAEL,UAAe;IAC7D,OAAO,IAAI,CAACf,IAAI,CAACkB,GAAG,CAAM,GAAG,IAAI,CAACjB,MAAM,gCAAgCE,aAAa,MAAMiB,CAAC,EAAE,EAACL,UAAU,CAAC;EAC5G;EAEAM,gBAAgB,CAACC,EAAU;IACzB,OAAO,IAAI,CAACtB,IAAI,CAACuB,MAAM,CAAM,GAAG,IAAI,CAACtB,MAAM,iBAAiBqB,EAAE,EAAE,CAAC;EACnE;EAAC;qBA5CUxB,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAA0B,SAAjB1B,iBAAiB;IAAA2B,YAFhB;EAAM","names":["environment","PermissionService","constructor","http","apiUrl","getListeMultiFonction","IdApplication","IdRole","get","getListeFonctionUnique","getFonctionUnique","Id","getMultiFonction","RechFonctionUnique","rech","apiUrlDAO","RechMultiFonction","addPermission","Permission","post","updatePermission","put","ModifierAcces","i","deletePermission","id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\Services\\permission.service.ts"],"sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionService {\r\n  private apiUrl = environment.apiUrl + 'Permission';\r\n  private apiUrlDAO = environment.apiUrl + 'PermissionControllerDAO';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getListeMultiFonction(IdApplication:number ,IdRole: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/ListeMultiFonction/${IdApplication}/${IdRole}`);\r\n  }\r\n\r\n  getListeFonctionUnique(IdApplication: number, IdRole: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/ListeFonctionUnique/${IdApplication}/${IdRole}`);\r\n  }\r\n\r\n  getFonctionUnique(Id:number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/RechercheFonctionUnique/Get/${Id}`);\r\n  }\r\n\r\n  getMultiFonction(Id: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/RechercheMultiFonction/Get/${Id}`);\r\n  }\r\n\r\n  RechFonctionUnique(rech: string | null, IdApplication: number, IdRole: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrlDAO}/RechercheFonctionUnique/${rech}/${IdApplication}/${IdRole}`);\r\n  }\r\n\r\n  RechMultiFonction(rech :string | null, IdApplication: number, IdRole: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrlDAO}/RechercheMultiFonction/${rech}/${IdApplication}/${IdRole}`);\r\n  }\r\n\r\n  addPermission(Permission: any): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl + \"/ajouter\", Permission);\r\n  }\r\n\r\n  updatePermission(Permission: any): Observable<any> {\r\n    return this.http.put<any>(this.apiUrl + \"/modifier\", Permission);\r\n  }\r\n\r\n  ModifierAcces(IdApplication: number ,i: number ,Permission: any): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/modifierAcces?idApplication=${IdApplication}&i=${i}`,Permission);\r\n  }\r\n\r\n  deletePermission(id: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/supprimer?id=${id}`);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}