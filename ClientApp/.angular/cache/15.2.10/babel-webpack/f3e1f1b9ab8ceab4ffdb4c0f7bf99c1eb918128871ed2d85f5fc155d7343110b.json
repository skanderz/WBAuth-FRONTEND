{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { CustomEncoder } from '../auth/customEncoder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nexport class UtilisateurService {\n  constructor(http, jwtHelper, route, router) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.route = route;\n    this.router = router;\n    this.apiUrl = environment.apiUrl + 'Utilisateur';\n    this.authChangeSub = new Subject();\n    this.authChanged = this.authChangeSub.asObservable();\n    this.logout = () => {\n      this.clearCookies();\n    };\n    this.clearCookies = () => {\n      localStorage.clear();\n      sessionStorage.clear();\n      this.sendAuthStateChangeNotification(false);\n    };\n    this.confirmEmail = (token, email) => {\n      let params = new HttpParams({\n        encoder: new CustomEncoder()\n      });\n      params = params.append('token', token);\n      params = params.append('email', email);\n      return this.http.get(this.apiUrl + \"/emailConfirmation\", {\n        params: params\n      });\n    };\n    this.sendAuthStateChangeNotification = isAuthenticated => {\n      this.authChangeSub.next(isAuthenticated);\n    };\n    this.isUserAuthenticated = () => {\n      const token = localStorage.getItem(\"token\");\n      let bool;\n      if (token && !this.jwtHelper.isTokenExpired(token)) {\n        bool = true;\n      } else bool = false;\n      console.log(\"token : \" + bool);\n      return bool;\n    };\n  }\n  Inscription(Utilisateur) {\n    return this.http.post(this.apiUrl + \"/inscription\", Utilisateur);\n  }\n  login(login) {\n    return this.http.post(this.apiUrl + \"/login\", login);\n  }\n  LoginWithGoogle(credentials) {\n    const header = new HttpHeaders().set('Content-type', 'application/json');\n    return this.http.post(this.apiUrl + \"/LoginWithGoogle\", JSON.stringify(credentials), {\n      headers: header,\n      withCredentials: true\n    });\n  }\n  LoginWithFacebook(credentials) {\n    const header = new HttpHeaders().set('Content-type', 'application/json');\n    return this.http.post(this.apiUrl + \"/LoginWithFacebook\", JSON.stringify(credentials), {\n      headers: header,\n      withCredentials: true\n    });\n  }\n  LoginWithLinkedIn(credentials) {\n    const header = new HttpHeaders().set('Content-type', 'application/json');\n    return this.http.post(this.apiUrl + \"/LoginWithLinkedIn\", JSON.stringify(credentials), {\n      headers: header,\n      withCredentials: true\n    });\n  }\n  twoStepLogin(body) {\n    return this.http.post(this.apiUrl + \"/TwoStepVerification\", body);\n  }\n  forgotPassword(ForgotPassword) {\n    return this.http.post(this.apiUrl + \"/forgotPassword\", ForgotPassword);\n  }\n  resetPassword(ResetPassword) {\n    return this.http.post(this.apiUrl + \"/resetPassword\", ResetPassword);\n  }\n  checkPassword(email, passwordToCheck) {\n    return this.http.get(`${this.apiUrl}/checkPassword/${email}/${passwordToCheck}`);\n  }\n  getUtilisateurs() {\n    return this.http.get(this.apiUrl + \"/List\");\n  }\n  getUtilisateur(id) {\n    return this.http.get(`${this.apiUrl}/Get/${id}`);\n  }\n  Recherche(rech) {\n    return this.http.get(`${this.apiUrl}/Recherche/${rech}`);\n  }\n  addUtilisateur(Utilisateur) {\n    return this.http.post(this.apiUrl + \"/ajouter\", Utilisateur);\n  }\n  updateUtilisateur(id, Utilisateur) {\n    return this.http.put(`${this.apiUrl}/modifier/${id}`, Utilisateur);\n  }\n  deleteUtilisateur(Id) {\n    return this.http.delete(`${this.apiUrl}/supprimer/${Id}`);\n  }\n  static #_ = this.ɵfac = function UtilisateurService_Factory(t) {\n    return new (t || UtilisateurService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.ActivatedRoute), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilisateurService,\n    factory: UtilisateurService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["environment","HttpParams","HttpHeaders","Subject","CustomEncoder","UtilisateurService","constructor","http","jwtHelper","route","router","apiUrl","authChangeSub","asObservable","clearCookies","localStorage","clear","sessionStorage","sendAuthStateChangeNotification","token","email","params","encoder","append","get","isAuthenticated","next","getItem","bool","isTokenExpired","console","log","Inscription","Utilisateur","post","login","LoginWithGoogle","credentials","header","set","JSON","stringify","headers","withCredentials","LoginWithFacebook","LoginWithLinkedIn","twoStepLogin","body","forgotPassword","ForgotPassword","resetPassword","ResetPassword","checkPassword","passwordToCheck","getUtilisateurs","getUtilisateur","id","Recherche","rech","addUtilisateur","updateUtilisateur","put","deleteUtilisateur","Id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\Services\\utilisateur.service.ts"],"sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApplicationService } from './application.service';\r\nimport { RoleService } from './role.service';\r\nimport { CustomEncoder } from '../auth/customEncoder';\r\nimport { TwoFactor } from '../auth/twoFactor.interface';\r\n\r\n\r\n@Injectable({  providedIn: 'root',})\r\nexport class UtilisateurService {\r\n  private apiUrl = environment.apiUrl + 'Utilisateur'; \r\n  private authChangeSub = new Subject<boolean>()\r\n  public authChanged = this.authChangeSub.asObservable();\r\n\r\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService, private route: ActivatedRoute, private router: Router){}\r\n\r\n\r\n  Inscription(Utilisateur: any): Observable<any>{\r\n    return this.http.post<any>(this.apiUrl + \"/inscription\" ,Utilisateur);\r\n  }\r\n\r\n  login(login: any): Observable<any>{\r\n    return this.http.post(this.apiUrl + \"/login\", login);\r\n  }\r\n\r\n  LoginWithGoogle(credentials: string): Observable<any> {\r\n    const header = new HttpHeaders().set('Content-type', 'application/json');\r\n    return this.http.post(this.apiUrl + \"/LoginWithGoogle\", JSON.stringify(credentials), { headers: header, withCredentials: true });\r\n  }\r\n\r\n  LoginWithFacebook(credentials: string): Observable<any> {\r\n    const header = new HttpHeaders().set('Content-type', 'application/json');\r\n    return this.http.post(this.apiUrl + \"/LoginWithFacebook\", JSON.stringify(credentials), { headers: header, withCredentials: true });\r\n  }\r\n\r\n  LoginWithLinkedIn(credentials: string): Observable<any> {\r\n    const header = new HttpHeaders().set('Content-type', 'application/json');\r\n    return this.http.post(this.apiUrl + \"/LoginWithLinkedIn\", JSON.stringify(credentials), { headers: header, withCredentials: true });\r\n  }\r\n\r\n  logout = () => {  this.clearCookies();  }\r\n\r\n  clearCookies = () => {\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n    this.sendAuthStateChangeNotification(false);\r\n  }\r\n\r\n  twoStepLogin(body: TwoFactor): Observable<any> {\r\n    return this.http.post(this.apiUrl + \"/TwoStepVerification\", body);\r\n  }\r\n\r\n  public confirmEmail = (token: string, email: string) => {\r\n    let params = new HttpParams({ encoder: new CustomEncoder() });\r\n    params = params.append('token', token);\r\n    params = params.append('email', email);\r\n    return this.http.get(this.apiUrl + \"/emailConfirmation\", { params: params });\r\n  }\r\n\r\n\r\n  forgotPassword(ForgotPassword : any): Observable<any> {\r\n    return this.http.post(this.apiUrl + \"/forgotPassword\", ForgotPassword);\r\n  }\r\n\r\n  resetPassword(ResetPassword: any): Observable<any> {\r\n    return this.http.post(this.apiUrl + \"/resetPassword\", ResetPassword);\r\n  }\r\n\r\n  checkPassword(email:string ,passwordToCheck:string): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/checkPassword/${email}/${passwordToCheck}`);\r\n  }\r\n\r\n  sendAuthStateChangeNotification = (isAuthenticated: boolean) => {\r\n    this.authChangeSub.next(isAuthenticated);\r\n  }\r\n\r\n  isUserAuthenticated = (): boolean => {\r\n    const token = localStorage.getItem(\"token\");\r\n    let bool!: boolean;\r\n    if (token && !this.jwtHelper.isTokenExpired(token)) { bool = true; } else bool = false;\r\n    console.log(\"token : \" + bool);\r\n    return bool;\r\n  }\r\n\r\n  getUtilisateurs(): Observable<any[]> {\r\n    return this.http.get<any[]>(this.apiUrl + \"/List\");\r\n  }\r\n\r\n  getUtilisateur(id: string | null): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/Get/${id}`);\r\n  }\r\n\r\n  Recherche(rech: string | null): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/Recherche/${rech}`);\r\n  }\r\n\r\n  addUtilisateur(Utilisateur: any): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl + \"/ajouter\", Utilisateur);\r\n  }\r\n\r\n  updateUtilisateur(id:string | null ,Utilisateur: any): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/modifier/${id}`, Utilisateur);\r\n  }\r\n\r\n  deleteUtilisateur(Id: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/supprimer/${Id}`);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}