{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../Services/utilisateur.service\";\nimport * as i2 from \"./../../auth/password-confirmation-validator.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../Services/journalisation.service\";\nimport * as i5 from \"../../Services/action.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nfunction TwoStepVerificationAppExterneComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelement(1, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.errorMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction TwoStepVerificationAppExterneComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Verification effectu\\u00E9e ! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TwoStepVerificationAppExterneComponent_em_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"em\");\n    i0.ɵɵtext(1, \"Saisir le code de verification !\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"/Authentification\"];\n};\nexport class TwoStepVerificationAppExterneComponent {\n  constructor(UtilisateurService, passConfValidator, router, route, JournalisationService, ActionService, location) {\n    this.UtilisateurService = UtilisateurService;\n    this.passConfValidator = passConfValidator;\n    this.router = router;\n    this.route = route;\n    this.JournalisationService = JournalisationService;\n    this.ActionService = ActionService;\n    this.location = location;\n    this.validateControl = controlName => {\n      return this.twoStepForm.get(controlName).invalid && this.twoStepForm.get(controlName).touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.twoStepForm.get(controlName).hasError(errorName);\n    };\n    this.loginUser = twoStepFormValue => {\n      this.showError = false;\n      const formValue = {\n        ...twoStepFormValue\n      };\n      let twoFactorDto = {\n        email: this.email,\n        provider: this.provider,\n        code: formValue.twoFactorCode\n      };\n      this.UtilisateurService.twoStepLogin(twoFactorDto).subscribe({\n        next: res => {\n          this.showSuccess = true;\n          localStorage.setItem(\"token\", res.token);\n          window.location.href = \"https://\" + this.urlAppExterne + \"?username=\" + res.username + \"&isAuthSuccessful=\" + res.isAuthSuccessful + \"&token=\" + res.token;\n        },\n        error: err => {\n          this.errorMessage = \"Vérification du code échouée !\";\n          this.showError = true;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    const fullPath = this.location.path();\n    const parts = fullPath.split('/');\n    if (parts.length > 0) {\n      this.urlAppExterne = parts[parts.length - 1];\n    }\n    this.twoStepForm = new FormGroup({\n      twoFactorCode: new FormControl('', [Validators.required])\n    });\n    this.provider = this.route.snapshot.queryParams['provider'];\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n    this.UtilisateurService.Recherche(this.route.snapshot.queryParams['email']).subscribe(data => {\n      this.email = data[0].email;\n    });\n  }\n  static #_ = this.ɵfac = function TwoStepVerificationAppExterneComponent_Factory(t) {\n    return new (t || TwoStepVerificationAppExterneComponent)(i0.ɵɵdirectiveInject(i1.UtilisateurService), i0.ɵɵdirectiveInject(i2.PasswordConfirmationValidatorService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.JournalisationService), i0.ɵɵdirectiveInject(i5.ActionService), i0.ɵɵdirectiveInject(i6.Location));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TwoStepVerificationAppExterneComponent,\n    selectors: [[\"app-two-step-verificationAppExterne\"]],\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"AccueilContent\", 2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\"], [\"src\", \"../../assets/Images/PC-AccueilPrincipale.png\", 2, \"width\", \"350px\", \"height\", \"350px\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", \"justify-content\", \"center\", \"align-items\", \"center\", \"margin\", \"0px 0px 0px -20px\"], [\"src\", \"../../assets/Images/WBConcept-AccueilPrincipale.png\", 2, \"width\", \"70%\"], [\"style\", \"max-width:600px;\", \"class\", \"alert alert-danger centered-element\", \"role\", \"alert\", 4, \"ngIf\"], [\"style\", \"max-width:600px;\", \"class\", \"alert alert-success centered-element\", \"role\", \"alert\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 1, \"register\", 3, \"formGroup\", \"ngSubmit\"], [4, \"ngIf\"], [\"placeholder\", \"CODE\", \"type\", \"text\", \"id\", \"twoFactorCode\", \"formControlName\", \"twoFactorCode\", \"required\", \"\", 1, \"auth-field\"], [\"id\", \"forgotPasswordBtn\", \"type\", \"submit\", 1, \"auth-btn\", 3, \"disabled\"], [2, \"color\", \"#C4BDF6\", \"padding-top\", \"5px\"], [1, \"mdp-oubli\\u00E9\", 3, \"routerLink\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\", \"centered-element\", 2, \"max-width\", \"600px\"], [3, \"innerHTML\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\", \"centered-element\", 2, \"max-width\", \"600px\"]],\n    template: function TwoStepVerificationAppExterneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵtemplate(4, TwoStepVerificationAppExterneComponent_div_4_Template, 2, 1, \"div\", 4);\n        i0.ɵɵtemplate(5, TwoStepVerificationAppExterneComponent_div_5_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementStart(6, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function TwoStepVerificationAppExterneComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.loginUser(ctx.twoStepForm.value);\n        });\n        i0.ɵɵtemplate(7, TwoStepVerificationAppExterneComponent_em_7_Template, 2, 0, \"em\", 7);\n        i0.ɵɵelement(8, \"input\", 8);\n        i0.ɵɵelementStart(9, \"button\", 9);\n        i0.ɵɵtext(10, \"VALIDER\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 10);\n        i0.ɵɵtext(12, \" \\u2022\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2022 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵtext(14, \" Revenir \\u00E0 l'\\u00E9cran de connexion \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.twoStepForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"twoFactorCode\") && ctx.hasError(\"twoFactorCode\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.twoStepForm.valid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(6, _c0));\n      }\n    },\n    dependencies: [i6.NgIf, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.FormGroupDirective, i7.FormControlName, i3.RouterLink],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","TwoStepVerificationAppExterneComponent","constructor","UtilisateurService","passConfValidator","router","route","JournalisationService","ActionService","location","controlName","twoStepForm","get","invalid","touched","errorName","hasError","twoStepFormValue","showError","formValue","twoFactorDto","email","provider","code","twoFactorCode","twoStepLogin","subscribe","next","res","showSuccess","localStorage","setItem","token","window","href","urlAppExterne","username","isAuthSuccessful","error","err","errorMessage","ngOnInit","fullPath","path","parts","split","length","required","snapshot","queryParams","returnUrl","Recherche","data","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilApplicationExterne\\Authentification\\two-step-verificationAppExterne.component.ts","C:\\Users\\Skander\\source\\repos\\WBAuth.Frontend\\ClientApp\\src\\app\\AccueilApplicationExterne\\Authentification\\two-step-verificationAppExterne.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Response } from '../../auth/response.interface';\r\nimport { TwoFactor } from '../../auth/twoFactor.interface';\r\nimport { UtilisateurService } from './../../Services/utilisateur.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { PasswordConfirmationValidatorService } from './../../auth/password-confirmation-validator.service';\r\nimport { JournalisationService } from '../../Services/journalisation.service';\r\nimport { ActionService } from '../../Services/action.service';\r\nimport { Action } from '../../Models/action.model';\r\nimport { Location } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-two-step-verificationAppExterne',\r\n  templateUrl: './two-step-verificationAppExterne.component.html'\r\n})\r\n\r\nexport class TwoStepVerificationAppExterneComponent implements OnInit {\r\n  private provider!: string;\r\n  private email!: string;\r\n  private returnUrl!: string;\r\n  twoStepForm!: FormGroup;\r\n  showError!: boolean;\r\n  showSuccess!: boolean;\r\n  errorMessage!: string;\r\n\r\n  constructor(private UtilisateurService: UtilisateurService, private passConfValidator: PasswordConfirmationValidatorService, private router: Router,\r\n    private route: ActivatedRoute, private JournalisationService: JournalisationService, private ActionService: ActionService, private location: Location){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    const fullPath = this.location.path();\r\n    const parts = fullPath.split('/');\r\n    if (parts.length > 0) { this.urlAppExterne = parts[parts.length - 1]; }\r\n\r\n    this.twoStepForm = new FormGroup({\r\n      twoFactorCode: new FormControl('', [Validators.required]),\r\n    });\r\n    this.provider = this.route.snapshot.queryParams['provider'];\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\r\n    this.UtilisateurService.Recherche(this.route.snapshot.queryParams['email']).subscribe((data) => {\r\n      this.email = data[0].email;\r\n    })\r\n  }\r\n\r\n  validateControl = (controlName: string) => {\r\n    return this.twoStepForm.get(controlName)!.invalid && this.twoStepForm.get(controlName)!.touched\r\n  }\r\n\r\n  hasError = (controlName: string, errorName: string) => {\r\n    return this.twoStepForm.get(controlName)!.hasError(errorName)\r\n  }\r\n\r\n  loginUser = (twoStepFormValue : any) => {\r\n    this.showError = false;\r\n    const formValue = { ...twoStepFormValue };\r\n    let twoFactorDto: TwoFactor = {\r\n      email: this.email,\r\n      provider: this.provider,\r\n      code: formValue.twoFactorCode\r\n    }\r\n    this.UtilisateurService.twoStepLogin(twoFactorDto).subscribe({\r\n      next: (res: Response) => {\r\n          this.showSuccess = true;\r\n          localStorage.setItem(\"token\", res.token);\r\n          window.location.href = \"https://\" + this.urlAppExterne + \"?username=\" + res.username + \"&isAuthSuccessful=\" + res.isAuthSuccessful + \"&token=\" + res.token;                            \r\n        },\r\n      error: (err: HttpErrorResponse) => {\r\n          this.errorMessage = \"Vérification du code échouée !\";\r\n          this.showError = true;\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","<div class=\"AccueilContent\" style=\"display:flex; justify-content:center; align-items:center;\">\r\n\r\n  <img src=\"../../assets/Images/PC-AccueilPrincipale.png\" style=\"width:350px; height:350px\" />\r\n\r\n  <div style=\"display:flex; flex-direction:column; justify-content:center; align-items:center; margin:0px 0px 0px -20px;\">\r\n    <img src=\"../../assets/Images/WBConcept-AccueilPrincipale.png\" style=\"width:70%;\" />\r\n\r\n     <div style=\"max-width:600px;\" *ngIf=\"showError\" class=\"alert alert-danger centered-element\" role=\"alert\"> <span [innerHTML]=\"errorMessage\"></span>  </div>\r\n     <div style=\"max-width:600px;\" *ngIf=\"showSuccess\" class=\"alert alert-success centered-element\" role=\"alert\"> Verification effectuée ! </div>\r\n\r\n    <form class=\"register\" [formGroup]=\"twoStepForm\" autocomplete=\"off\" novalidate (ngSubmit)=\"loginUser(twoStepForm.value)\">\r\n\r\n      <em *ngIf=\"validateControl('twoFactorCode') && hasError('twoFactorCode', 'required')\">Saisir le code de verification !</em>\r\n      <input class=\"auth-field\" placeholder=\"CODE\" type=\"text\" id=\"twoFactorCode\" formControlName=\"twoFactorCode\" required>\r\n\r\n      <button id=\"forgotPasswordBtn\" type=\"submit\" class=\"auth-btn\" [disabled]=\"!twoStepForm.valid\">VALIDER</button>\r\n      <div style=\"color:#C4BDF6; padding-top: 5px\"> •────────────────────────• </div>\r\n      <div class=\"mdp-oublié\" [routerLink]=\"['/Authentification']\">  Revenir à l'écran de connexion </div>\r\n\r\n    </form>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}